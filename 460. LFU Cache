class LFUCache {
    int maxSizeCache;
    int usedsize;
    int minfreq;
    unordered_map<int,pair<int, int>>keynode;
    unordered_map<int,list<int>> freqkey;
    unordered_map<int, list<int>:: iterator> keylist;
public:
    LFUCache(int capacity) {
        maxSizeCache = capacity;
        usedsize = 0;
    }
    
    int get(int key) {
        if(keynode.count(key)==0)
        return -1;
        freqkey[keynode[key].second].erase(keylist[key]);
        keynode[key].second++;
        freqkey[keynode[key].second].push_back(key);
        keylist[key]=--freqkey[keynode[key].second].end();
        if(freqkey[minfreq].size()==0){
            minfreq++;
        }
            return keynode[key].first;

    }
    
    void put(int key, int value) {
        if(maxSizeCache <= 0)
        return;
        int alreadystored = get(key);
        if(alreadystored != -1) {
            keynode[key].first = value;
            return;
        }

        if(usedsize >= maxSizeCache) {
            keynode.erase(freqkey[minfreq].front() );
            keylist.erase(freqkey[minfreq].front() );
            freqkey[minfreq].pop_front();
            usedsize--;
        }
        keynode[key]={value , 1};
        freqkey[1].push_back(key);
        keylist[key]=--freqkey[1].end();
        minfreq = 1;
        usedsize++;
    }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
