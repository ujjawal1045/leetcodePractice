/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void helper(int &mini, int &previous, TreeNode* root ) {
    if(!root)
    return;
        cout<<"previous beforeeee and root "<<previous<<", "<<root->val<<endl;


    helper(mini,previous, root->left);
   if(previous != -1) {
       cout<<"mini before "<<mini<<endl;
     mini = min(mini,  root->val - previous);
     cout<<"mini after "<<mini<<endl;
   }
   cout<<"previous before "<<previous<<endl;
     previous = root->val;
     cout<<"previous after and root "<<previous<<", "<<root->val<<endl;
    helper(mini, previous, root->right);
}
    int getMinimumDifference(TreeNode* root) {
        int min = INT_MAX;
        int previous = -1;
        helper(min,previous, root);
        return min;
    }
};
