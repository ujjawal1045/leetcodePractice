class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {

        vector<vector<pair<int, int>>> adj(n);

        vector<int> dist(n, 1e9);

        int stops = 0;

        for(auto edge: flights) {
            int from = edge[0];
            int to = edge[1];
            int price = edge[2];
            adj[from].push_back({to, price});
        }
       queue<pair<int,int>> q;
        q.push({src, 0});

        while(!q.empty() && stops <= k) {
            int size = q.size();
            while(size--) {
                int dest = q.front().first;
                int cost = q.front().second;
                q.pop();
                for(auto  it : adj[dest]) {
                    int dest2 = it.first;
                    int cost2 = it.second;

                    if (cost2 + cost < dist[dest2]) {
                        dist[dest2] = cost2 + cost;
                        q.push({dest2, dist[dest2]});
                    }
                }
            }
            stops++;
        }

        if(dist[dst] == 1e9)
        return -1;
        else
        return dist[dst];
    }
};
