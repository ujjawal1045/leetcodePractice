class Solution {
public:

int find(vector<int> &parent, int a){
    if(a==parent[a])
    return a;
    return parent[a]=find(parent, parent[a]);
}
    int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {
        int n = vals.size();
        vector<int> parent(n);
        map<int, int> maxElement;
        map<int, int> count;
        int goodPaths = n;

        for(int i = 0; i< n ;i++) {
            maxElement[i]=vals[i];
            count[i]=1;
            parent[i]=i;
        }

        sort(edges.begin(), edges.end(),[&](const vector<int>& a, vector<int>& b) {
            int c = max(vals[a[0]], vals[a[1]]);
            int d = max(vals[b[0]], vals[b[1]]);
             return c < d;

        });

        for(auto edge: edges)
        cout<<edge[0]<<" "<<edge[1]<<endl;

        for(auto edge: edges) {
            int a = find(parent,edge[0]);
            int b = find(parent, edge[1]);

            if(maxElement[a] != maxElement[b]) {
                if(maxElement[a] > maxElement[b]){
                    parent[b]=a;
                } else {
                    parent[a]=b;
                }
            } else {
                parent[a]=b;
                goodPaths += count[a] * count[b];
                count[b] += count[a];
            }
        }

        return goodPaths;
    }
};
