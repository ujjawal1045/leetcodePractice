class Solution {
public:
int dfs(int node, vector<bool>& visited, vector<vector<int>>& adj) {
    visited[node] = 1;
    int count = 1;
    for(auto it : adj[node]){
        if(!visited[it])
        count += dfs(it, visited,adj);
    }
    return count;
}
    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);

        for(auto edge: edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }

        vector<bool> visited(n);
        long long totalpairs = 0;
        long long size = 0;
        long long remaningnode = n;
        for(int i = 0; i< n;i++) {
            if(!visited[i]) {
               
               size = dfs(i,visited, adj);
               totalpairs += size * (remaningnode - size);
               remaningnode -= size;
            }
        }

        return totalpairs;
    }
};
