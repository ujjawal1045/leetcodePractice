/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    TreeNode* buildTree1( vector<int>& inorder,vector<int>& postorder,int InSt,int InEnd,int postSt,int postEnd,map<int,int>&ourmap) {
        
        if( InSt>InEnd)
            return NULL;
        TreeNode *node= new TreeNode(postorder[postEnd]);
        
    int InRoot=ourmap[node->val];
        int numleft=InRoot-InSt;
        
   
        node->left=buildTree1(inorder,postorder,InSt,InRoot-1,postSt,postSt+numleft-1,ourmap);
        node->right=buildTree1(inorder,postorder,InRoot+1,InEnd,postSt+numleft,postEnd-1,ourmap);
        return node;
    }
    
    
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        
        map <int,int>ourmap;
        for(int i=0;i<inorder.size();i++) {
            ourmap[inorder[i]]=i;
        }
        
        TreeNode *node= buildTree1(inorder,postorder,0 ,inorder.size()-1,0,postorder.size()-1,ourmap);
        return node;
        
    }
};
