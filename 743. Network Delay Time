class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<pair<int, int>> adj[n+1];
        vector<int> distance(n+1, 1e9);

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

        for (auto edge: times) {
            int st = edge[0];
            int end = edge[1];
            int dur = edge[2];
            adj[st].push_back({end, dur});
        }

        distance[0] = -1e9;
        distance[k] = 0;
        pq.push({0,k});

        while(!pq.empty()) {
            int dest = pq.top().second;
            int ptt = pq.top().first;
            pq.pop();

            for(auto edge : adj[dest]) {
                int v = edge.first;
                int crdur = edge.second;

                if(ptt + crdur < distance[v]) {
                    distance[v] = ptt + crdur;
                    pq.push({distance[v], v});
                }
            }
        }

        for(auto dis: distance) {
            if (dis == 1e9)
            return -1;
        }

        return *max_element(distance.begin(), distance.end());
    }
};
