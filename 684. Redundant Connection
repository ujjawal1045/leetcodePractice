class Solution {
public:

int find(int x, vector<int> & parent) {
    if(parent[x] == x)
    return x;
    else
    return find(parent[x], parent);
}
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> parent(n+1);
        for(int i = 1; i<=n; i++) {
            parent[i] = i;
        }
        if(n==0)
        return {};

        for(int i = 0; i< edges.size(); i++) {
            int p1 = find(edges[i][0], parent);
            int p2 = find(edges[i][1], parent);
            if(p1 == p2)
            return edges[i];
            else
            parent[p1] = p2;
        }
        return {};
    }
};
